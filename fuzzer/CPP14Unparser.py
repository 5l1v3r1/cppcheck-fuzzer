# Generated by Grammarinator 19.3

from itertools import chain
from grammarinator.runtime import *

import CPP14Unlexer


class CPP14Unparser(Grammarinator):

    def __init__(self, unlexer):
        super(CPP14Unparser, self).__init__()
        self.unlexer = unlexer
    @depthcontrol
    def translationunit(self):
        current = self.create_node(UnparserRule(name='translationunit'))
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.declarationseq()

        current += self.unlexer.EOF()
        return current
    translationunit.min_depth = 1

    @depthcontrol
    def primaryexpression(self):
        current = self.create_node(UnparserRule(name='primaryexpression'))
        choice = self.choice([0 if [2, 1, 4, 4, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_330', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_330', choice)] = self.unlexer.weights.get(('alt_330', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.literal()
        elif choice == 1:
            current += self.unlexer.This()
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='('))
            current += self.expression()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 3:
            current += self.idexpression()
        elif choice == 4:
            current += self.lambdaexpression()
        return current
    primaryexpression.min_depth = 1

    @depthcontrol
    def idexpression(self):
        current = self.create_node(UnparserRule(name='idexpression'))
        choice = self.choice([0 if [3, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_338', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_338', choice)] = self.unlexer.weights.get(('alt_338', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unqualifiedid()
        elif choice == 1:
            current += self.qualifiedid()
        return current
    idexpression.min_depth = 3

    @depthcontrol
    def unqualifiedid(self):
        current = self.create_node(UnparserRule(name='unqualifiedid'))
        choice = self.choice([0 if [3, 2, 7, 4, 4, 2, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_341', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_341', choice)] = self.unlexer.weights.get(('alt_341', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Identifier()
        elif choice == 1:
            current += self.operatorfunctionid()
        elif choice == 2:
            current += self.conversionfunctionid()
        elif choice == 3:
            current += self.literaloperatorid()
        elif choice == 4:
            current += self.create_node(UnlexerRule(src='~'))
            current += self.classname()
        elif choice == 5:
            current += self.create_node(UnlexerRule(src='~'))
            current += self.decltypespecifier()
        elif choice == 6:
            current += self.templateid()
        return current
    unqualifiedid.min_depth = 2

    @depthcontrol
    def qualifiedid(self):
        current = self.create_node(UnparserRule(name='qualifiedid'))
        current += self.nestednamespecifier()
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.unlexer.Template()

        current += self.unqualifiedid()
        return current
    qualifiedid.min_depth = 3

    @depthcontrol
    def nestednamespecifier(self):
        current = self.create_node(UnparserRule(name='nestednamespecifier'))
        choice = self.choice([0 if [0, 5, 5, 2, 3, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_352', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_352', choice)] = self.unlexer.weights.get(('alt_352', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='::'))
        elif choice == 1:
            current += self.thetypename()
            current += self.create_node(UnlexerRule(src='::'))
        elif choice == 2:
            current += self.namespacename()
            current += self.create_node(UnlexerRule(src='::'))
        elif choice == 3:
            current += self.decltypespecifier()
            current += self.create_node(UnlexerRule(src='::'))
        elif choice == 4:
            current += self.nestednamespecifier()
            current += self.unlexer.Identifier()
            current += self.create_node(UnlexerRule(src='::'))
        elif choice == 5:
            current += self.nestednamespecifier()
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.unlexer.Template()

            current += self.simpletemplateid()
            current += self.create_node(UnlexerRule(src='::'))
        return current
    nestednamespecifier.min_depth = 0

    @depthcontrol
    def lambdaexpression(self):
        current = self.create_node(UnparserRule(name='lambdaexpression'))
        current += self.lambdaintroducer()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.lambdadeclarator()

        current += self.compoundstatement()
        return current
    lambdaexpression.min_depth = 1

    @depthcontrol
    def lambdaintroducer(self):
        current = self.create_node(UnparserRule(name='lambdaintroducer'))
        current += self.create_node(UnlexerRule(src='['))
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.lambdacapture()

        current += self.create_node(UnlexerRule(src=']'))
        return current
    lambdaintroducer.min_depth = 0

    @depthcontrol
    def lambdacapture(self):
        current = self.create_node(UnparserRule(name='lambdacapture'))
        choice = self.choice([0 if [1, 4, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_370', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_370', choice)] = self.unlexer.weights.get(('alt_370', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.capturedefault()
        elif choice == 1:
            current += self.capturelist()
        elif choice == 2:
            current += self.capturedefault()
            current += self.create_node(UnlexerRule(src=','))
            current += self.capturelist()
        return current
    lambdacapture.min_depth = 1

    @depthcontrol
    def capturedefault(self):
        current = self.create_node(UnparserRule(name='capturedefault'))
        choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_375', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_375', choice)] = self.unlexer.weights.get(('alt_375', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='&'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='='))
        return current
    capturedefault.min_depth = 0

    @depthcontrol
    def capturelist(self):
        current = self.create_node(UnparserRule(name='capturelist'))
        choice = self.choice([0 if [3, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_380', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_380', choice)] = self.unlexer.weights.get(('alt_380', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.capture()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

        elif choice == 1:
            current += self.capturelist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.capture()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

        return current
    capturelist.min_depth = 3

    @depthcontrol
    def capture(self):
        current = self.create_node(UnparserRule(name='capture'))
        choice = self.choice([0 if [2, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_388', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_388', choice)] = self.unlexer.weights.get(('alt_388', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.simplecapture()
        elif choice == 1:
            current += self.initcapture()
        return current
    capture.min_depth = 2

    @depthcontrol
    def simplecapture(self):
        current = self.create_node(UnparserRule(name='simplecapture'))
        choice = self.choice([0 if [3, 3, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_391', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_391', choice)] = self.unlexer.weights.get(('alt_391', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Identifier()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='&'))
            current += self.unlexer.Identifier()
        elif choice == 2:
            current += self.unlexer.This()
        return current
    simplecapture.min_depth = 1

    @depthcontrol
    def initcapture(self):
        current = self.create_node(UnparserRule(name='initcapture'))
        choice = self.choice([0 if [3, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_396', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_396', choice)] = self.unlexer.weights.get(('alt_396', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Identifier()
            current += self.initializer()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='&'))
            current += self.unlexer.Identifier()
            current += self.initializer()
        return current
    initcapture.min_depth = 3

    @depthcontrol
    def lambdadeclarator(self):
        current = self.create_node(UnparserRule(name='lambdadeclarator'))
        current += self.create_node(UnlexerRule(src='('))
        current += self.parameterdeclarationclause()
        current += self.create_node(UnlexerRule(src=')'))
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.unlexer.Mutable()

        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.exceptionspecification()

        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.attributespecifierseq()

        if self.unlexer.max_depth >= 5:
            for _ in self.zero_or_one():
                current += self.trailingreturntype()

        return current
    lambdadeclarator.min_depth = 1

    @depthcontrol
    def postfixexpression(self):
        current = self.create_node(UnparserRule(name='postfixexpression'))
        choice = self.choice([0 if [2, 4, 3, 3, 2, 4, 2, 4, 4, 4, 3, 3, 3, 3, 6, 6, 6, 6, 4, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_406', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_406', choice)] = self.unlexer.weights.get(('alt_406', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.primaryexpression()
        elif choice == 1:
            current += self.postfixexpression()
            current += self.create_node(UnlexerRule(src='['))
            current += self.expression()
            current += self.create_node(UnlexerRule(src=']'))
        elif choice == 2:
            current += self.postfixexpression()
            current += self.create_node(UnlexerRule(src='['))
            current += self.bracedinitlist()
            current += self.create_node(UnlexerRule(src=']'))
        elif choice == 3:
            current += self.postfixexpression()
            current += self.create_node(UnlexerRule(src='('))
            if self.unlexer.max_depth >= 4:
                for _ in self.zero_or_one():
                    current += self.expressionlist()

            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 4:
            current += self.simpletypespecifier()
            current += self.create_node(UnlexerRule(src='('))
            if self.unlexer.max_depth >= 4:
                for _ in self.zero_or_one():
                    current += self.expressionlist()

            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 5:
            current += self.typenamespecifier()
            current += self.create_node(UnlexerRule(src='('))
            if self.unlexer.max_depth >= 4:
                for _ in self.zero_or_one():
                    current += self.expressionlist()

            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 6:
            current += self.simpletypespecifier()
            current += self.bracedinitlist()
        elif choice == 7:
            current += self.typenamespecifier()
            current += self.bracedinitlist()
        elif choice == 8:
            current += self.postfixexpression()
            current += self.create_node(UnlexerRule(src='.'))
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.unlexer.Template()

            current += self.idexpression()
        elif choice == 9:
            current += self.postfixexpression()
            current += self.create_node(UnlexerRule(src='->'))
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.unlexer.Template()

            current += self.idexpression()
        elif choice == 10:
            current += self.postfixexpression()
            current += self.create_node(UnlexerRule(src='.'))
            current += self.pseudodestructorname()
        elif choice == 11:
            current += self.postfixexpression()
            current += self.create_node(UnlexerRule(src='->'))
            current += self.pseudodestructorname()
        elif choice == 12:
            current += self.postfixexpression()
            current += self.create_node(UnlexerRule(src='++'))
        elif choice == 13:
            current += self.postfixexpression()
            current += self.create_node(UnlexerRule(src='--'))
        elif choice == 14:
            current += self.unlexer.Dynamic_cast()
            current += self.create_node(UnlexerRule(src='<'))
            current += self.thetypeid()
            current += self.create_node(UnlexerRule(src='>'))
            current += self.create_node(UnlexerRule(src='('))
            current += self.expression()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 15:
            current += self.unlexer.Static_cast()
            current += self.create_node(UnlexerRule(src='<'))
            current += self.thetypeid()
            current += self.create_node(UnlexerRule(src='>'))
            current += self.create_node(UnlexerRule(src='('))
            current += self.expression()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 16:
            current += self.unlexer.Reinterpret_cast()
            current += self.create_node(UnlexerRule(src='<'))
            current += self.thetypeid()
            current += self.create_node(UnlexerRule(src='>'))
            current += self.create_node(UnlexerRule(src='('))
            current += self.expression()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 17:
            current += self.unlexer.Const_cast()
            current += self.create_node(UnlexerRule(src='<'))
            current += self.thetypeid()
            current += self.create_node(UnlexerRule(src='>'))
            current += self.create_node(UnlexerRule(src='('))
            current += self.expression()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 18:
            current += self.typeidofthetypeid()
            current += self.create_node(UnlexerRule(src='('))
            current += self.expression()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 19:
            current += self.typeidofthetypeid()
            current += self.create_node(UnlexerRule(src='('))
            current += self.thetypeid()
            current += self.create_node(UnlexerRule(src=')'))
        return current
    postfixexpression.min_depth = 2

    @depthcontrol
    def typeidofexpr(self):
        current = self.create_node(UnparserRule(name='typeidofexpr'))
        current += self.unlexer.Typeid_()
        return current
    typeidofexpr.min_depth = 1

    @depthcontrol
    def typeidofthetypeid(self):
        current = self.create_node(UnparserRule(name='typeidofthetypeid'))
        current += self.unlexer.Typeid_()
        return current
    typeidofthetypeid.min_depth = 1

    @depthcontrol
    def expressionlist(self):
        current = self.create_node(UnparserRule(name='expressionlist'))
        current += self.initializerlist()
        return current
    expressionlist.min_depth = 3

    @depthcontrol
    def pseudodestructorname(self):
        current = self.create_node(UnparserRule(name='pseudodestructorname'))
        choice = self.choice([0 if [5, 5, 5, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_468', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_468', choice)] = self.unlexer.weights.get(('alt_468', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.nestednamespecifier()

            current += self.thetypename()
            current += self.create_node(UnlexerRule(src='::'))
            current += self.create_node(UnlexerRule(src='~'))
            current += self.thetypename()
        elif choice == 1:
            current += self.nestednamespecifier()
            current += self.unlexer.Template()
            current += self.simpletemplateid()
            current += self.create_node(UnlexerRule(src='::'))
            current += self.create_node(UnlexerRule(src='~'))
            current += self.thetypename()
        elif choice == 2:
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.nestednamespecifier()

            current += self.create_node(UnlexerRule(src='~'))
            current += self.thetypename()
        elif choice == 3:
            current += self.create_node(UnlexerRule(src='~'))
            current += self.decltypespecifier()
        return current
    pseudodestructorname.min_depth = 2

    @depthcontrol
    def unaryexpression(self):
        current = self.create_node(UnparserRule(name='unaryexpression'))
        choice = self.choice([0 if [3, 5, 5, 5, 4, 6, 3, 6, 5, 7, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_481', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_481', choice)] = self.unlexer.weights.get(('alt_481', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.postfixexpression()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='++'))
            current += self.castexpression()
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='--'))
            current += self.castexpression()
        elif choice == 3:
            current += self.unaryoperator()
            current += self.castexpression()
        elif choice == 4:
            current += self.unlexer.Sizeof()
            current += self.unaryexpression()
        elif choice == 5:
            current += self.unlexer.Sizeof()
            current += self.create_node(UnlexerRule(src='('))
            current += self.thetypeid()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 6:
            current += self.unlexer.Sizeof()
            current += self.create_node(UnlexerRule(src='...'))
            current += self.create_node(UnlexerRule(src='('))
            current += self.unlexer.Identifier()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 7:
            current += self.unlexer.Alignof()
            current += self.create_node(UnlexerRule(src='('))
            current += self.thetypeid()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 8:
            current += self.noexceptexpression()
        elif choice == 9:
            current += self.newexpression()
        elif choice == 10:
            current += self.deleteexpression()
        return current
    unaryexpression.min_depth = 3

    @depthcontrol
    def unaryoperator(self):
        current = self.create_node(UnparserRule(name='unaryoperator'))
        choice = self.choice([0 if [0, 0, 0, 0, 0, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_502', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_502', choice)] = self.unlexer.weights.get(('alt_502', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='|'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='*'))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='&'))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src='+'))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src='!'))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src='~'))
        elif choice == 6:
            current += self.create_node(UnlexerRule(src='-'))
        elif choice == 7:
            current += self.create_node(UnlexerRule(src='not'))
        return current
    unaryoperator.min_depth = 0

    @depthcontrol
    def newexpression(self):
        current = self.create_node(UnparserRule(name='newexpression'))
        choice = self.choice([0 if [6, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_519', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_519', choice)] = self.unlexer.weights.get(('alt_519', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='::'))

            current += self.unlexer.New()
            if self.unlexer.max_depth >= 5:
                for _ in self.zero_or_one():
                    current += self.newplacement()

            current += self.newtypeid()
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.newinitializer()

        elif choice == 1:
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='::'))

            current += self.unlexer.New()
            if self.unlexer.max_depth >= 5:
                for _ in self.zero_or_one():
                    current += self.newplacement()

            current += self.create_node(UnlexerRule(src='('))
            current += self.thetypeid()
            current += self.create_node(UnlexerRule(src=')'))
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.newinitializer()

        return current
    newexpression.min_depth = 6

    @depthcontrol
    def newplacement(self):
        current = self.create_node(UnparserRule(name='newplacement'))
        current += self.create_node(UnlexerRule(src='('))
        current += self.expressionlist()
        current += self.create_node(UnlexerRule(src=')'))
        return current
    newplacement.min_depth = 4

    @depthcontrol
    def newtypeid(self):
        current = self.create_node(UnparserRule(name='newtypeid'))
        current += self.typespecifierseq()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.newdeclarator()

        return current
    newtypeid.min_depth = 5

    @depthcontrol
    def newdeclarator(self):
        current = self.create_node(UnparserRule(name='newdeclarator'))
        choice = self.choice([0 if [1, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_535', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_535', choice)] = self.unlexer.weights.get(('alt_535', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.ptroperator()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.newdeclarator()

        elif choice == 1:
            current += self.noptrnewdeclarator()
        return current
    newdeclarator.min_depth = 1

    @depthcontrol
    def noptrnewdeclarator(self):
        current = self.create_node(UnparserRule(name='noptrnewdeclarator'))
        choice = self.choice([0 if [4, 18][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_539', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_539', choice)] = self.unlexer.weights.get(('alt_539', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='['))
            current += self.expression()
            current += self.create_node(UnlexerRule(src=']'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

        elif choice == 1:
            current += self.noptrnewdeclarator()
            current += self.create_node(UnlexerRule(src='['))
            current += self.constantexpression()
            current += self.create_node(UnlexerRule(src=']'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

        return current
    noptrnewdeclarator.min_depth = 4

    @depthcontrol
    def newinitializer(self):
        current = self.create_node(UnparserRule(name='newinitializer'))
        choice = self.choice([0 if [0, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_548', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_548', choice)] = self.unlexer.weights.get(('alt_548', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='('))
            if self.unlexer.max_depth >= 4:
                for _ in self.zero_or_one():
                    current += self.expressionlist()

            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 1:
            current += self.bracedinitlist()
        return current
    newinitializer.min_depth = 0

    @depthcontrol
    def deleteexpression(self):
        current = self.create_node(UnparserRule(name='deleteexpression'))
        choice = self.choice([0 if [5, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_554', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_554', choice)] = self.unlexer.weights.get(('alt_554', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='::'))

            current += self.unlexer.Delete()
            current += self.castexpression()
        elif choice == 1:
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='::'))

            current += self.unlexer.Delete()
            current += self.create_node(UnlexerRule(src='['))
            current += self.create_node(UnlexerRule(src=']'))
            current += self.castexpression()
        return current
    deleteexpression.min_depth = 5

    @depthcontrol
    def noexceptexpression(self):
        current = self.create_node(UnparserRule(name='noexceptexpression'))
        current += self.unlexer.Noexcept()
        current += self.create_node(UnlexerRule(src='('))
        current += self.expression()
        current += self.create_node(UnlexerRule(src=')'))
        return current
    noexceptexpression.min_depth = 4

    @depthcontrol
    def castexpression(self):
        current = self.create_node(UnparserRule(name='castexpression'))
        choice = self.choice([0 if [4, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_565', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_565', choice)] = self.unlexer.weights.get(('alt_565', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unaryexpression()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='('))
            current += self.thetypeid()
            current += self.create_node(UnlexerRule(src=')'))
            current += self.castexpression()
        return current
    castexpression.min_depth = 4

    @depthcontrol
    def pmexpression(self):
        current = self.create_node(UnparserRule(name='pmexpression'))
        choice = self.choice([0 if [5, 6, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_570', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_570', choice)] = self.unlexer.weights.get(('alt_570', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.castexpression()
        elif choice == 1:
            current += self.pmexpression()
            current += self.create_node(UnlexerRule(src='.*'))
            current += self.castexpression()
        elif choice == 2:
            current += self.pmexpression()
            current += self.create_node(UnlexerRule(src='->*'))
            current += self.castexpression()
        return current
    pmexpression.min_depth = 5

    @depthcontrol
    def multiplicativeexpression(self):
        current = self.create_node(UnparserRule(name='multiplicativeexpression'))
        choice = self.choice([0 if [6, 7, 7, 7][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_576', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_576', choice)] = self.unlexer.weights.get(('alt_576', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.pmexpression()
        elif choice == 1:
            current += self.multiplicativeexpression()
            current += self.create_node(UnlexerRule(src='*'))
            current += self.pmexpression()
        elif choice == 2:
            current += self.multiplicativeexpression()
            current += self.create_node(UnlexerRule(src='/'))
            current += self.pmexpression()
        elif choice == 3:
            current += self.multiplicativeexpression()
            current += self.create_node(UnlexerRule(src='%'))
            current += self.pmexpression()
        return current
    multiplicativeexpression.min_depth = 6

    @depthcontrol
    def additiveexpression(self):
        current = self.create_node(UnparserRule(name='additiveexpression'))
        choice = self.choice([0 if [7, 8, 8][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_584', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_584', choice)] = self.unlexer.weights.get(('alt_584', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.multiplicativeexpression()
        elif choice == 1:
            current += self.additiveexpression()
            current += self.create_node(UnlexerRule(src='+'))
            current += self.multiplicativeexpression()
        elif choice == 2:
            current += self.additiveexpression()
            current += self.create_node(UnlexerRule(src='-'))
            current += self.multiplicativeexpression()
        return current
    additiveexpression.min_depth = 7

    @depthcontrol
    def shiftexpression(self):
        current = self.create_node(UnparserRule(name='shiftexpression'))
        choice = self.choice([0 if [8, 9][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_590', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_590', choice)] = self.unlexer.weights.get(('alt_590', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.additiveexpression()
        elif choice == 1:
            current += self.shiftexpression()
            current += self.shiftoperator()
            current += self.additiveexpression()
        return current
    shiftexpression.min_depth = 8

    @depthcontrol
    def shiftoperator(self):
        current = self.create_node(UnparserRule(name='shiftoperator'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_593', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_593', choice)] = self.unlexer.weights.get(('alt_593', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.RightShift()
        elif choice == 1:
            current += self.unlexer.LeftShift()
        return current
    shiftoperator.min_depth = 1

    @depthcontrol
    def relationalexpression(self):
        current = self.create_node(UnparserRule(name='relationalexpression'))
        choice = self.choice([0 if [9, 10, 10, 10, 10][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_596', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_596', choice)] = self.unlexer.weights.get(('alt_596', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.shiftexpression()
        elif choice == 1:
            current += self.relationalexpression()
            current += self.create_node(UnlexerRule(src='<'))
            current += self.shiftexpression()
        elif choice == 2:
            current += self.relationalexpression()
            current += self.create_node(UnlexerRule(src='>'))
            current += self.shiftexpression()
        elif choice == 3:
            current += self.relationalexpression()
            current += self.create_node(UnlexerRule(src='<='))
            current += self.shiftexpression()
        elif choice == 4:
            current += self.relationalexpression()
            current += self.create_node(UnlexerRule(src='>='))
            current += self.shiftexpression()
        return current
    relationalexpression.min_depth = 9

    @depthcontrol
    def equalityexpression(self):
        current = self.create_node(UnparserRule(name='equalityexpression'))
        choice = self.choice([0 if [10, 11, 11][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_606', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_606', choice)] = self.unlexer.weights.get(('alt_606', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.relationalexpression()
        elif choice == 1:
            current += self.equalityexpression()
            current += self.create_node(UnlexerRule(src='=='))
            current += self.relationalexpression()
        elif choice == 2:
            current += self.equalityexpression()
            current += self.create_node(UnlexerRule(src='!='))
            current += self.relationalexpression()
        return current
    equalityexpression.min_depth = 10

    @depthcontrol
    def andexpression(self):
        current = self.create_node(UnparserRule(name='andexpression'))
        choice = self.choice([0 if [11, 12][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_612', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_612', choice)] = self.unlexer.weights.get(('alt_612', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.equalityexpression()
        elif choice == 1:
            current += self.andexpression()
            current += self.create_node(UnlexerRule(src='&'))
            current += self.equalityexpression()
        return current
    andexpression.min_depth = 11

    @depthcontrol
    def exclusiveorexpression(self):
        current = self.create_node(UnparserRule(name='exclusiveorexpression'))
        choice = self.choice([0 if [12, 13][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_616', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_616', choice)] = self.unlexer.weights.get(('alt_616', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.andexpression()
        elif choice == 1:
            current += self.exclusiveorexpression()
            current += self.create_node(UnlexerRule(src='^'))
            current += self.andexpression()
        return current
    exclusiveorexpression.min_depth = 12

    @depthcontrol
    def inclusiveorexpression(self):
        current = self.create_node(UnparserRule(name='inclusiveorexpression'))
        choice = self.choice([0 if [13, 14][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_620', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_620', choice)] = self.unlexer.weights.get(('alt_620', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.exclusiveorexpression()
        elif choice == 1:
            current += self.inclusiveorexpression()
            current += self.create_node(UnlexerRule(src='|'))
            current += self.exclusiveorexpression()
        return current
    inclusiveorexpression.min_depth = 13

    @depthcontrol
    def logicalandexpression(self):
        current = self.create_node(UnparserRule(name='logicalandexpression'))
        choice = self.choice([0 if [14, 15, 15][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_624', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_624', choice)] = self.unlexer.weights.get(('alt_624', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.inclusiveorexpression()
        elif choice == 1:
            current += self.logicalandexpression()
            current += self.create_node(UnlexerRule(src='&&'))
            current += self.inclusiveorexpression()
        elif choice == 2:
            current += self.logicalandexpression()
            current += self.create_node(UnlexerRule(src='and'))
            current += self.inclusiveorexpression()
        return current
    logicalandexpression.min_depth = 14

    @depthcontrol
    def logicalorexpression(self):
        current = self.create_node(UnparserRule(name='logicalorexpression'))
        choice = self.choice([0 if [15, 16, 16][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_630', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_630', choice)] = self.unlexer.weights.get(('alt_630', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.logicalandexpression()
        elif choice == 1:
            current += self.logicalorexpression()
            current += self.create_node(UnlexerRule(src='||'))
            current += self.logicalandexpression()
        elif choice == 2:
            current += self.logicalorexpression()
            current += self.create_node(UnlexerRule(src='or'))
            current += self.logicalandexpression()
        return current
    logicalorexpression.min_depth = 15

    @depthcontrol
    def conditionalexpression(self):
        current = self.create_node(UnparserRule(name='conditionalexpression'))
        choice = self.choice([0 if [16, 16][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_636', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_636', choice)] = self.unlexer.weights.get(('alt_636', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.logicalorexpression()
        elif choice == 1:
            current += self.logicalorexpression()
            current += self.create_node(UnlexerRule(src='?'))
            current += self.expression()
            current += self.create_node(UnlexerRule(src=':'))
            current += self.assignmentexpression()
        return current
    conditionalexpression.min_depth = 16

    @depthcontrol
    def assignmentexpression(self):
        current = self.create_node(UnparserRule(name='assignmentexpression'))
        choice = self.choice([0 if [17, 16, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_641', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_641', choice)] = self.unlexer.weights.get(('alt_641', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.conditionalexpression()
        elif choice == 1:
            current += self.logicalorexpression()
            current += self.assignmentoperator()
            current += self.initializerclause()
        elif choice == 2:
            current += self.throwexpression()
        return current
    assignmentexpression.min_depth = 2

    @depthcontrol
    def assignmentoperator(self):
        current = self.create_node(UnparserRule(name='assignmentoperator'))
        choice = self.choice([0 if [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_645', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_645', choice)] = self.unlexer.weights.get(('alt_645', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='='))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='*='))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='/='))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src='%='))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src='+='))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src='-='))
        elif choice == 6:
            current += self.unlexer.RightShiftAssign()
        elif choice == 7:
            current += self.unlexer.LeftShiftAssign()
        elif choice == 8:
            current += self.create_node(UnlexerRule(src='&='))
        elif choice == 9:
            current += self.create_node(UnlexerRule(src='^='))
        elif choice == 10:
            current += self.create_node(UnlexerRule(src='|='))
        return current
    assignmentoperator.min_depth = 0

    @depthcontrol
    def expression(self):
        current = self.create_node(UnparserRule(name='expression'))
        choice = self.choice([0 if [3, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_666', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_666', choice)] = self.unlexer.weights.get(('alt_666', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.assignmentexpression()
        elif choice == 1:
            current += self.expression()
            current += self.create_node(UnlexerRule(src=','))
            current += self.assignmentexpression()
        return current
    expression.min_depth = 3

    @depthcontrol
    def constantexpression(self):
        current = self.create_node(UnparserRule(name='constantexpression'))
        current += self.conditionalexpression()
        return current
    constantexpression.min_depth = 17

    @depthcontrol
    def statement(self):
        current = self.create_node(UnparserRule(name='statement'))
        choice = self.choice([0 if [3, 1, 1, 6, 3, 2, 3, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_670', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_670', choice)] = self.unlexer.weights.get(('alt_670', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.labeledstatement()
        elif choice == 1:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.expressionstatement()
        elif choice == 2:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.compoundstatement()
        elif choice == 3:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.selectionstatement()
        elif choice == 4:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.iterationstatement()
        elif choice == 5:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.jumpstatement()
        elif choice == 6:
            current += self.declarationstatement()
        elif choice == 7:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.tryblock()
        return current
    statement.min_depth = 1

    @depthcontrol
    def labeledstatement(self):
        current = self.create_node(UnparserRule(name='labeledstatement'))
        choice = self.choice([0 if [3, 18, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_685', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_685', choice)] = self.unlexer.weights.get(('alt_685', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.unlexer.Identifier()
            current += self.create_node(UnlexerRule(src=':'))
            current += self.statement()
        elif choice == 1:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.unlexer.Case()
            current += self.constantexpression()
            current += self.create_node(UnlexerRule(src=':'))
            current += self.statement()
        elif choice == 2:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.unlexer.Default()
            current += self.create_node(UnlexerRule(src=':'))
            current += self.statement()
        return current
    labeledstatement.min_depth = 2

    @depthcontrol
    def expressionstatement(self):
        current = self.create_node(UnparserRule(name='expressionstatement'))
        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_one():
                current += self.expression()

        current += self.create_node(UnlexerRule(src=';'))
        return current
    expressionstatement.min_depth = 0

    @depthcontrol
    def compoundstatement(self):
        current = self.create_node(UnparserRule(name='compoundstatement'))
        current += self.create_node(UnlexerRule(src='{'))
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.statementseq()

        current += self.create_node(UnlexerRule(src='}'))
        return current
    compoundstatement.min_depth = 0

    @depthcontrol
    def statementseq(self):
        current = self.create_node(UnparserRule(name='statementseq'))
        choice = self.choice([0 if [2, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_700', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_700', choice)] = self.unlexer.weights.get(('alt_700', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.statement()
        elif choice == 1:
            current += self.statementseq()
            current += self.statement()
        return current
    statementseq.min_depth = 2

    @depthcontrol
    def selectionstatement(self):
        current = self.create_node(UnparserRule(name='selectionstatement'))
        choice = self.choice([0 if [5, 5, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_703', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_703', choice)] = self.unlexer.weights.get(('alt_703', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.If()
            current += self.create_node(UnlexerRule(src='('))
            current += self.condition()
            current += self.create_node(UnlexerRule(src=')'))
            current += self.statement()
        elif choice == 1:
            current += self.unlexer.If()
            current += self.create_node(UnlexerRule(src='('))
            current += self.condition()
            current += self.create_node(UnlexerRule(src=')'))
            current += self.statement()
            current += self.unlexer.Else()
            current += self.statement()
        elif choice == 2:
            current += self.unlexer.Switch()
            current += self.create_node(UnlexerRule(src='('))
            current += self.condition()
            current += self.create_node(UnlexerRule(src=')'))
            current += self.statement()
        return current
    selectionstatement.min_depth = 5

    @depthcontrol
    def condition(self):
        current = self.create_node(UnparserRule(name='condition'))
        choice = self.choice([0 if [4, 7, 7][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_713', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_713', choice)] = self.unlexer.weights.get(('alt_713', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.expression()
        elif choice == 1:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.declspecifierseq()
            current += self.declarator()
            current += self.create_node(UnlexerRule(src='='))
            current += self.initializerclause()
        elif choice == 2:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.declspecifierseq()
            current += self.declarator()
            current += self.bracedinitlist()
        return current
    condition.min_depth = 4

    @depthcontrol
    def iterationstatement(self):
        current = self.create_node(UnparserRule(name='iterationstatement'))
        choice = self.choice([0 if [5, 4, 2, 8][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_720', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_720', choice)] = self.unlexer.weights.get(('alt_720', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.While()
            current += self.create_node(UnlexerRule(src='('))
            current += self.condition()
            current += self.create_node(UnlexerRule(src=')'))
            current += self.statement()
        elif choice == 1:
            current += self.unlexer.Do()
            current += self.statement()
            current += self.unlexer.While()
            current += self.create_node(UnlexerRule(src='('))
            current += self.expression()
            current += self.create_node(UnlexerRule(src=')'))
            current += self.create_node(UnlexerRule(src=';'))
        elif choice == 2:
            current += self.unlexer.For()
            current += self.create_node(UnlexerRule(src='('))
            current += self.forinitstatement()
            if self.unlexer.max_depth >= 5:
                for _ in self.zero_or_one():
                    current += self.condition()

            current += self.create_node(UnlexerRule(src=';'))
            if self.unlexer.max_depth >= 4:
                for _ in self.zero_or_one():
                    current += self.expression()

            current += self.create_node(UnlexerRule(src=')'))
            current += self.statement()
        elif choice == 3:
            current += self.unlexer.For()
            current += self.create_node(UnlexerRule(src='('))
            current += self.forrangedeclaration()
            current += self.create_node(UnlexerRule(src=':'))
            current += self.forrangeinitializer()
            current += self.create_node(UnlexerRule(src=')'))
            current += self.statement()
        return current
    iterationstatement.min_depth = 2

    @depthcontrol
    def forinitstatement(self):
        current = self.create_node(UnparserRule(name='forinitstatement'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_738', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_738', choice)] = self.unlexer.weights.get(('alt_738', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.expressionstatement()
        elif choice == 1:
            current += self.simpledeclaration()
        return current
    forinitstatement.min_depth = 1

    @depthcontrol
    def forrangedeclaration(self):
        current = self.create_node(UnparserRule(name='forrangedeclaration'))
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.attributespecifierseq()

        current += self.declspecifierseq()
        current += self.declarator()
        return current
    forrangedeclaration.min_depth = 7

    @depthcontrol
    def forrangeinitializer(self):
        current = self.create_node(UnparserRule(name='forrangeinitializer'))
        choice = self.choice([0 if [4, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_742', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_742', choice)] = self.unlexer.weights.get(('alt_742', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.expression()
        elif choice == 1:
            current += self.bracedinitlist()
        return current
    forrangeinitializer.min_depth = 1

    @depthcontrol
    def jumpstatement(self):
        current = self.create_node(UnparserRule(name='jumpstatement'))
        choice = self.choice([0 if [1, 1, 1, 1, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_745', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_745', choice)] = self.unlexer.weights.get(('alt_745', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Break()
            current += self.create_node(UnlexerRule(src=';'))
        elif choice == 1:
            current += self.unlexer.Continue()
            current += self.create_node(UnlexerRule(src=';'))
        elif choice == 2:
            current += self.unlexer.Return()
            if self.unlexer.max_depth >= 4:
                for _ in self.zero_or_one():
                    current += self.expression()

            current += self.create_node(UnlexerRule(src=';'))
        elif choice == 3:
            current += self.unlexer.Return()
            current += self.bracedinitlist()
            current += self.create_node(UnlexerRule(src=';'))
        elif choice == 4:
            current += self.unlexer.Goto()
            current += self.unlexer.Identifier()
            current += self.create_node(UnlexerRule(src=';'))
        return current
    jumpstatement.min_depth = 1

    @depthcontrol
    def declarationstatement(self):
        current = self.create_node(UnparserRule(name='declarationstatement'))
        current += self.blockdeclaration()
        return current
    declarationstatement.min_depth = 2

    @depthcontrol
    def declarationseq(self):
        current = self.create_node(UnparserRule(name='declarationseq'))
        choice = self.choice([0 if [2, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_757', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_757', choice)] = self.unlexer.weights.get(('alt_757', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.declaration()
        elif choice == 1:
            current += self.declarationseq()
            current += self.declaration()
        return current
    declarationseq.min_depth = 2

    @depthcontrol
    def declaration(self):
        current = self.create_node(UnparserRule(name='declaration'))
        choice = self.choice([0 if [2, 8, 5, 3, 3, 2, 3, 1, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_760', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_760', choice)] = self.unlexer.weights.get(('alt_760', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.blockdeclaration()
        elif choice == 1:
            current += self.functiondefinition()
        elif choice == 2:
            current += self.templatedeclaration()
        elif choice == 3:
            current += self.explicitinstantiation()
        elif choice == 4:
            current += self.explicitspecialization()
        elif choice == 5:
            current += self.linkagespecification()
        elif choice == 6:
            current += self.namespacedefinition()
        elif choice == 7:
            current += self.emptydeclaration()
        elif choice == 8:
            current += self.attributedeclaration()
        return current
    declaration.min_depth = 1

    @depthcontrol
    def blockdeclaration(self):
        current = self.create_node(UnparserRule(name='blockdeclaration'))
        choice = self.choice([0 if [1, 2, 7, 4, 6, 19, 7, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_770', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_770', choice)] = self.unlexer.weights.get(('alt_770', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.simpledeclaration()
        elif choice == 1:
            current += self.asmdefinition()
        elif choice == 2:
            current += self.namespacealiasdefinition()
        elif choice == 3:
            current += self.usingdeclaration()
        elif choice == 4:
            current += self.usingdirective()
        elif choice == 5:
            current += self.static_assertdeclaration()
        elif choice == 6:
            current += self.aliasdeclaration()
        elif choice == 7:
            current += self.opaqueenumdeclaration()
        return current
    blockdeclaration.min_depth = 1

    @depthcontrol
    def aliasdeclaration(self):
        current = self.create_node(UnparserRule(name='aliasdeclaration'))
        current += self.unlexer.Using()
        current += self.unlexer.Identifier()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.attributespecifierseq()

        current += self.create_node(UnlexerRule(src='='))
        current += self.thetypeid()
        current += self.create_node(UnlexerRule(src=';'))
        return current
    aliasdeclaration.min_depth = 6

    @depthcontrol
    def simpledeclaration(self):
        current = self.create_node(UnparserRule(name='simpledeclaration'))
        choice = self.choice([0 if [0, 9][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_782', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_782', choice)] = self.unlexer.weights.get(('alt_782', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.declspecifierseq()

            if self.unlexer.max_depth >= 9:
                for _ in self.zero_or_one():
                    current += self.initdeclaratorlist()

            current += self.create_node(UnlexerRule(src=';'))
        elif choice == 1:
            current += self.attributespecifierseq()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.declspecifierseq()

            current += self.initdeclaratorlist()
            current += self.create_node(UnlexerRule(src=';'))
        return current
    simpledeclaration.min_depth = 0

    @depthcontrol
    def static_assertdeclaration(self):
        current = self.create_node(UnparserRule(name='static_assertdeclaration'))
        current += self.unlexer.Static_assert()
        current += self.create_node(UnlexerRule(src='('))
        current += self.constantexpression()
        current += self.create_node(UnlexerRule(src=','))
        current += self.unlexer.Stringliteral()
        current += self.create_node(UnlexerRule(src=')'))
        current += self.create_node(UnlexerRule(src=';'))
        return current
    static_assertdeclaration.min_depth = 18

    @depthcontrol
    def emptydeclaration(self):
        current = self.create_node(UnparserRule(name='emptydeclaration'))
        current += self.create_node(UnlexerRule(src=';'))
        return current
    emptydeclaration.min_depth = 0

    @depthcontrol
    def attributedeclaration(self):
        current = self.create_node(UnparserRule(name='attributedeclaration'))
        current += self.attributespecifierseq()
        current += self.create_node(UnlexerRule(src=';'))
        return current
    attributedeclaration.min_depth = 3

    @depthcontrol
    def declspecifier(self):
        current = self.create_node(UnparserRule(name='declspecifier'))
        choice = self.choice([0 if [2, 4, 2, 1, 1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_796', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_796', choice)] = self.unlexer.weights.get(('alt_796', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.storageclassspecifier()
        elif choice == 1:
            current += self.typespecifier()
        elif choice == 2:
            current += self.functionspecifier()
        elif choice == 3:
            current += self.unlexer.Friend()
        elif choice == 4:
            current += self.unlexer.Typedef()
        elif choice == 5:
            current += self.unlexer.Constexpr()
        return current
    declspecifier.min_depth = 1

    @depthcontrol
    def declspecifierseq(self):
        current = self.create_node(UnparserRule(name='declspecifierseq'))
        choice = self.choice([0 if [2, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_803', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_803', choice)] = self.unlexer.weights.get(('alt_803', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.declspecifier()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

        elif choice == 1:
            current += self.declspecifier()
            current += self.declspecifierseq()
        return current
    declspecifierseq.min_depth = 2

    @depthcontrol
    def storageclassspecifier(self):
        current = self.create_node(UnparserRule(name='storageclassspecifier'))
        choice = self.choice([0 if [1, 1, 1, 1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_807', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_807', choice)] = self.unlexer.weights.get(('alt_807', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Register()
        elif choice == 1:
            current += self.unlexer.Static()
        elif choice == 2:
            current += self.unlexer.Thread_local()
        elif choice == 3:
            current += self.unlexer.Extern()
        elif choice == 4:
            current += self.unlexer.Mutable()
        return current
    storageclassspecifier.min_depth = 1

    @depthcontrol
    def functionspecifier(self):
        current = self.create_node(UnparserRule(name='functionspecifier'))
        choice = self.choice([0 if [1, 1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_813', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_813', choice)] = self.unlexer.weights.get(('alt_813', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Inline()
        elif choice == 1:
            current += self.unlexer.Virtual()
        elif choice == 2:
            current += self.unlexer.Explicit()
        return current
    functionspecifier.min_depth = 1

    @depthcontrol
    def typedefname(self):
        current = self.create_node(UnparserRule(name='typedefname'))
        current += self.unlexer.Identifier()
        return current
    typedefname.min_depth = 3

    @depthcontrol
    def typespecifier(self):
        current = self.create_node(UnparserRule(name='typespecifier'))
        choice = self.choice([0 if [3, 4, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_817', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_817', choice)] = self.unlexer.weights.get(('alt_817', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.trailingtypespecifier()
        elif choice == 1:
            current += self.classspecifier()
        elif choice == 2:
            current += self.enumspecifier()
        return current
    typespecifier.min_depth = 3

    @depthcontrol
    def trailingtypespecifier(self):
        current = self.create_node(UnparserRule(name='trailingtypespecifier'))
        choice = self.choice([0 if [2, 4, 4, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_821', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_821', choice)] = self.unlexer.weights.get(('alt_821', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.simpletypespecifier()
        elif choice == 1:
            current += self.elaboratedtypespecifier()
        elif choice == 2:
            current += self.typenamespecifier()
        elif choice == 3:
            current += self.cvqualifier()
        return current
    trailingtypespecifier.min_depth = 2

    @depthcontrol
    def typespecifierseq(self):
        current = self.create_node(UnparserRule(name='typespecifierseq'))
        choice = self.choice([0 if [4, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_826', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_826', choice)] = self.unlexer.weights.get(('alt_826', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.typespecifier()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

        elif choice == 1:
            current += self.typespecifier()
            current += self.typespecifierseq()
        return current
    typespecifierseq.min_depth = 4

    @depthcontrol
    def trailingtypespecifierseq(self):
        current = self.create_node(UnparserRule(name='trailingtypespecifierseq'))
        choice = self.choice([0 if [3, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_830', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_830', choice)] = self.unlexer.weights.get(('alt_830', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.trailingtypespecifier()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

        elif choice == 1:
            current += self.trailingtypespecifier()
            current += self.trailingtypespecifierseq()
        return current
    trailingtypespecifierseq.min_depth = 3

    @depthcontrol
    def simpletypespecifier(self):
        current = self.create_node(UnparserRule(name='simpletypespecifier'))
        choice = self.choice([0 if [5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_834', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_834', choice)] = self.unlexer.weights.get(('alt_834', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.nestednamespecifier()

            current += self.thetypename()
        elif choice == 1:
            current += self.nestednamespecifier()
            current += self.unlexer.Template()
            current += self.simpletemplateid()
        elif choice == 2:
            current += self.unlexer.Char()
        elif choice == 3:
            current += self.unlexer.Char16()
        elif choice == 4:
            current += self.unlexer.Char32()
        elif choice == 5:
            current += self.unlexer.Wchar()
        elif choice == 6:
            current += self.unlexer.Bool()
        elif choice == 7:
            current += self.unlexer.Short()
        elif choice == 8:
            current += self.unlexer.Int()
        elif choice == 9:
            current += self.unlexer.Long()
        elif choice == 10:
            current += self.unlexer.Signed()
        elif choice == 11:
            current += self.unlexer.Unsigned()
        elif choice == 12:
            current += self.unlexer.Float()
        elif choice == 13:
            current += self.unlexer.Double()
        elif choice == 14:
            current += self.unlexer.Void()
        elif choice == 15:
            current += self.unlexer.Auto()
        elif choice == 16:
            current += self.decltypespecifier()
        return current
    simpletypespecifier.min_depth = 1

    @depthcontrol
    def thetypename(self):
        current = self.create_node(UnparserRule(name='thetypename'))
        choice = self.choice([0 if [4, 4, 4, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_853', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_853', choice)] = self.unlexer.weights.get(('alt_853', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.classname()
        elif choice == 1:
            current += self.enumname()
        elif choice == 2:
            current += self.typedefname()
        elif choice == 3:
            current += self.simpletemplateid()
        return current
    thetypename.min_depth = 4

    @depthcontrol
    def decltypespecifier(self):
        current = self.create_node(UnparserRule(name='decltypespecifier'))
        choice = self.choice([0 if [4, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_858', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_858', choice)] = self.unlexer.weights.get(('alt_858', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Decltype()
            current += self.create_node(UnlexerRule(src='('))
            current += self.expression()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 1:
            current += self.unlexer.Decltype()
            current += self.create_node(UnlexerRule(src='('))
            current += self.unlexer.Auto()
            current += self.create_node(UnlexerRule(src=')'))
        return current
    decltypespecifier.min_depth = 1

    @depthcontrol
    def elaboratedtypespecifier(self):
        current = self.create_node(UnparserRule(name='elaboratedtypespecifier'))
        choice = self.choice([0 if [3, 5, 5, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_865', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_865', choice)] = self.unlexer.weights.get(('alt_865', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.classkey()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.nestednamespecifier()

            current += self.unlexer.Identifier()
        elif choice == 1:
            current += self.classkey()
            current += self.simpletemplateid()
        elif choice == 2:
            current += self.classkey()
            current += self.nestednamespecifier()
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.unlexer.Template()

            current += self.simpletemplateid()
        elif choice == 3:
            current += self.unlexer.Enum()
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.nestednamespecifier()

            current += self.unlexer.Identifier()
        return current
    elaboratedtypespecifier.min_depth = 3

    @depthcontrol
    def enumname(self):
        current = self.create_node(UnparserRule(name='enumname'))
        current += self.unlexer.Identifier()
        return current
    enumname.min_depth = 3

    @depthcontrol
    def enumspecifier(self):
        current = self.create_node(UnparserRule(name='enumspecifier'))
        choice = self.choice([0 if [3, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_874', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_874', choice)] = self.unlexer.weights.get(('alt_874', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.enumhead()
            current += self.create_node(UnlexerRule(src='{'))
            if self.unlexer.max_depth >= 6:
                for _ in self.zero_or_one():
                    current += self.enumeratorlist()

            current += self.create_node(UnlexerRule(src='}'))
        elif choice == 1:
            current += self.enumhead()
            current += self.create_node(UnlexerRule(src='{'))
            current += self.enumeratorlist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.create_node(UnlexerRule(src='}'))
        return current
    enumspecifier.min_depth = 3

    @depthcontrol
    def enumhead(self):
        current = self.create_node(UnparserRule(name='enumhead'))
        choice = self.choice([0 if [2, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_883', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_883', choice)] = self.unlexer.weights.get(('alt_883', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.enumkey()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.unlexer.Identifier()

            if self.unlexer.max_depth >= 6:
                for _ in self.zero_or_one():
                    current += self.enumbase()

        elif choice == 1:
            current += self.enumkey()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.nestednamespecifier()
            current += self.unlexer.Identifier()
            if self.unlexer.max_depth >= 6:
                for _ in self.zero_or_one():
                    current += self.enumbase()

        return current
    enumhead.min_depth = 2

    @depthcontrol
    def opaqueenumdeclaration(self):
        current = self.create_node(UnparserRule(name='opaqueenumdeclaration'))
        current += self.enumkey()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.attributespecifierseq()

        current += self.unlexer.Identifier()
        if self.unlexer.max_depth >= 6:
            for _ in self.zero_or_one():
                current += self.enumbase()

        current += self.create_node(UnlexerRule(src=';'))
        return current
    opaqueenumdeclaration.min_depth = 3

    @depthcontrol
    def enumkey(self):
        current = self.create_node(UnparserRule(name='enumkey'))
        choice = self.choice([0 if [1, 1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_894', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_894', choice)] = self.unlexer.weights.get(('alt_894', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Enum()
        elif choice == 1:
            current += self.unlexer.Enum()
            current += self.unlexer.Class()
        elif choice == 2:
            current += self.unlexer.Enum()
            current += self.unlexer.Struct()
        return current
    enumkey.min_depth = 1

    @depthcontrol
    def enumbase(self):
        current = self.create_node(UnparserRule(name='enumbase'))
        current += self.create_node(UnlexerRule(src=':'))
        current += self.typespecifierseq()
        return current
    enumbase.min_depth = 5

    @depthcontrol
    def enumeratorlist(self):
        current = self.create_node(UnparserRule(name='enumeratorlist'))
        choice = self.choice([0 if [5, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_899', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_899', choice)] = self.unlexer.weights.get(('alt_899', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.enumeratordefinition()
        elif choice == 1:
            current += self.enumeratorlist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.enumeratordefinition()
        return current
    enumeratorlist.min_depth = 5

    @depthcontrol
    def enumeratordefinition(self):
        current = self.create_node(UnparserRule(name='enumeratordefinition'))
        choice = self.choice([0 if [4, 18][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_903', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_903', choice)] = self.unlexer.weights.get(('alt_903', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.enumerator()
        elif choice == 1:
            current += self.enumerator()
            current += self.create_node(UnlexerRule(src='='))
            current += self.constantexpression()
        return current
    enumeratordefinition.min_depth = 4

    @depthcontrol
    def enumerator(self):
        current = self.create_node(UnparserRule(name='enumerator'))
        current += self.unlexer.Identifier()
        return current
    enumerator.min_depth = 3

    @depthcontrol
    def namespacename(self):
        current = self.create_node(UnparserRule(name='namespacename'))
        choice = self.choice([0 if [4, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_907', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_907', choice)] = self.unlexer.weights.get(('alt_907', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.originalnamespacename()
        elif choice == 1:
            current += self.namespacealias()
        return current
    namespacename.min_depth = 4

    @depthcontrol
    def originalnamespacename(self):
        current = self.create_node(UnparserRule(name='originalnamespacename'))
        current += self.unlexer.Identifier()
        return current
    originalnamespacename.min_depth = 3

    @depthcontrol
    def namespacedefinition(self):
        current = self.create_node(UnparserRule(name='namespacedefinition'))
        choice = self.choice([0 if [5, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_910', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_910', choice)] = self.unlexer.weights.get(('alt_910', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.namednamespacedefinition()
        elif choice == 1:
            current += self.unnamednamespacedefinition()
        return current
    namespacedefinition.min_depth = 2

    @depthcontrol
    def namednamespacedefinition(self):
        current = self.create_node(UnparserRule(name='namednamespacedefinition'))
        choice = self.choice([0 if [4, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_913', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_913', choice)] = self.unlexer.weights.get(('alt_913', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.originalnamespacedefinition()
        elif choice == 1:
            current += self.extensionnamespacedefinition()
        return current
    namednamespacedefinition.min_depth = 4

    @depthcontrol
    def originalnamespacedefinition(self):
        current = self.create_node(UnparserRule(name='originalnamespacedefinition'))
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.unlexer.Inline()

        current += self.unlexer.Namespace()
        current += self.unlexer.Identifier()
        current += self.create_node(UnlexerRule(src='{'))
        current += self.namespacebody()
        current += self.create_node(UnlexerRule(src='}'))
        return current
    originalnamespacedefinition.min_depth = 3

    @depthcontrol
    def extensionnamespacedefinition(self):
        current = self.create_node(UnparserRule(name='extensionnamespacedefinition'))
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.unlexer.Inline()

        current += self.unlexer.Namespace()
        current += self.originalnamespacename()
        current += self.create_node(UnlexerRule(src='{'))
        current += self.namespacebody()
        current += self.create_node(UnlexerRule(src='}'))
        return current
    extensionnamespacedefinition.min_depth = 4

    @depthcontrol
    def unnamednamespacedefinition(self):
        current = self.create_node(UnparserRule(name='unnamednamespacedefinition'))
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.unlexer.Inline()

        current += self.unlexer.Namespace()
        current += self.create_node(UnlexerRule(src='{'))
        current += self.namespacebody()
        current += self.create_node(UnlexerRule(src='}'))
        return current
    unnamednamespacedefinition.min_depth = 1

    @depthcontrol
    def namespacebody(self):
        current = self.create_node(UnparserRule(name='namespacebody'))
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.declarationseq()

        return current
    namespacebody.min_depth = 0

    @depthcontrol
    def namespacealias(self):
        current = self.create_node(UnparserRule(name='namespacealias'))
        current += self.unlexer.Identifier()
        return current
    namespacealias.min_depth = 3

    @depthcontrol
    def namespacealiasdefinition(self):
        current = self.create_node(UnparserRule(name='namespacealiasdefinition'))
        current += self.unlexer.Namespace()
        current += self.unlexer.Identifier()
        current += self.create_node(UnlexerRule(src='='))
        current += self.qualifiednamespacespecifier()
        current += self.create_node(UnlexerRule(src=';'))
        return current
    namespacealiasdefinition.min_depth = 6

    @depthcontrol
    def qualifiednamespacespecifier(self):
        current = self.create_node(UnparserRule(name='qualifiednamespacespecifier'))
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.nestednamespecifier()

        current += self.namespacename()
        return current
    qualifiednamespacespecifier.min_depth = 5

    @depthcontrol
    def usingdeclaration(self):
        current = self.create_node(UnparserRule(name='usingdeclaration'))
        choice = self.choice([0 if [3, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_929', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_929', choice)] = self.unlexer.weights.get(('alt_929', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Using()
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.unlexer.Typename_()

            current += self.nestednamespecifier()
            current += self.unqualifiedid()
            current += self.create_node(UnlexerRule(src=';'))
        elif choice == 1:
            current += self.unlexer.Using()
            current += self.create_node(UnlexerRule(src='::'))
            current += self.unqualifiedid()
            current += self.create_node(UnlexerRule(src=';'))
        return current
    usingdeclaration.min_depth = 3

    @depthcontrol
    def usingdirective(self):
        current = self.create_node(UnparserRule(name='usingdirective'))
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.attributespecifierseq()

        current += self.unlexer.Using()
        current += self.unlexer.Namespace()
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.nestednamespecifier()

        current += self.namespacename()
        current += self.create_node(UnlexerRule(src=';'))
        return current
    usingdirective.min_depth = 5

    @depthcontrol
    def asmdefinition(self):
        current = self.create_node(UnparserRule(name='asmdefinition'))
        current += self.unlexer.Asm()
        current += self.create_node(UnlexerRule(src='('))
        current += self.unlexer.Stringliteral()
        current += self.create_node(UnlexerRule(src=')'))
        current += self.create_node(UnlexerRule(src=';'))
        return current
    asmdefinition.min_depth = 1

    @depthcontrol
    def linkagespecification(self):
        current = self.create_node(UnparserRule(name='linkagespecification'))
        choice = self.choice([0 if [1, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_942', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_942', choice)] = self.unlexer.weights.get(('alt_942', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Extern()
            current += self.unlexer.Stringliteral()
            current += self.create_node(UnlexerRule(src='{'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.declarationseq()

            current += self.create_node(UnlexerRule(src='}'))
        elif choice == 1:
            current += self.unlexer.Extern()
            current += self.unlexer.Stringliteral()
            current += self.declaration()
        return current
    linkagespecification.min_depth = 1

    @depthcontrol
    def attributespecifierseq(self):
        current = self.create_node(UnparserRule(name='attributespecifierseq'))
        choice = self.choice([0 if [2, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_948', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_948', choice)] = self.unlexer.weights.get(('alt_948', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.attributespecifier()
        elif choice == 1:
            current += self.attributespecifierseq()
            current += self.attributespecifier()
        return current
    attributespecifierseq.min_depth = 2

    @depthcontrol
    def attributespecifier(self):
        current = self.create_node(UnparserRule(name='attributespecifier'))
        choice = self.choice([0 if [1, 7][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_951', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_951', choice)] = self.unlexer.weights.get(('alt_951', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='['))
            current += self.create_node(UnlexerRule(src='['))
            current += self.attributelist()
            current += self.create_node(UnlexerRule(src=']'))
            current += self.create_node(UnlexerRule(src=']'))
        elif choice == 1:
            current += self.alignmentspecifier()
        return current
    attributespecifier.min_depth = 1

    @depthcontrol
    def alignmentspecifier(self):
        current = self.create_node(UnparserRule(name='alignmentspecifier'))
        choice = self.choice([0 if [6, 18][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_958', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_958', choice)] = self.unlexer.weights.get(('alt_958', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Alignas()
            current += self.create_node(UnlexerRule(src='('))
            current += self.thetypeid()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 1:
            current += self.unlexer.Alignas()
            current += self.create_node(UnlexerRule(src='('))
            current += self.constantexpression()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

            current += self.create_node(UnlexerRule(src=')'))
        return current
    alignmentspecifier.min_depth = 6

    @depthcontrol
    def attributelist(self):
        current = self.create_node(UnparserRule(name='attributelist'))
        choice = self.choice([0 if [0, 1, 5, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_969', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_969', choice)] = self.unlexer.weights.get(('alt_969', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 5:
                for _ in self.zero_or_one():
                    current += self.attribute()

        elif choice == 1:
            current += self.attributelist()
            current += self.create_node(UnlexerRule(src=','))
            if self.unlexer.max_depth >= 5:
                for _ in self.zero_or_one():
                    current += self.attribute()

        elif choice == 2:
            current += self.attribute()
            current += self.create_node(UnlexerRule(src='...'))
        elif choice == 3:
            current += self.attributelist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.attribute()
            current += self.create_node(UnlexerRule(src='...'))
        return current
    attributelist.min_depth = 0

    @depthcontrol
    def attribute(self):
        current = self.create_node(UnparserRule(name='attribute'))
        current += self.attributetoken()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.attributeargumentclause()

        return current
    attribute.min_depth = 4

    @depthcontrol
    def attributetoken(self):
        current = self.create_node(UnparserRule(name='attributetoken'))
        choice = self.choice([0 if [3, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_981', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_981', choice)] = self.unlexer.weights.get(('alt_981', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Identifier()
        elif choice == 1:
            current += self.attributescopedtoken()
        return current
    attributetoken.min_depth = 3

    @depthcontrol
    def attributescopedtoken(self):
        current = self.create_node(UnparserRule(name='attributescopedtoken'))
        current += self.attributenamespace()
        current += self.create_node(UnlexerRule(src='::'))
        current += self.unlexer.Identifier()
        return current
    attributescopedtoken.min_depth = 4

    @depthcontrol
    def attributenamespace(self):
        current = self.create_node(UnparserRule(name='attributenamespace'))
        current += self.unlexer.Identifier()
        return current
    attributenamespace.min_depth = 3

    @depthcontrol
    def attributeargumentclause(self):
        current = self.create_node(UnparserRule(name='attributeargumentclause'))
        current += self.create_node(UnlexerRule(src='('))
        current += self.balancedtokenseq()
        current += self.create_node(UnlexerRule(src=')'))
        return current
    attributeargumentclause.min_depth = 1

    @depthcontrol
    def balancedtokenseq(self):
        current = self.create_node(UnparserRule(name='balancedtokenseq'))
        choice = self.choice([0 if [0, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_987', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_987', choice)] = self.unlexer.weights.get(('alt_987', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.balancedtoken()

        elif choice == 1:
            current += self.balancedtokenseq()
            current += self.balancedtoken()
        return current
    balancedtokenseq.min_depth = 0

    @depthcontrol
    def balancedtoken(self):
        current = self.create_node(UnparserRule(name='balancedtoken'))
        choice = self.choice([0 if [1, 1, 1, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_991', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_991', choice)] = self.unlexer.weights.get(('alt_991', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='('))
            current += self.balancedtokenseq()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='['))
            current += self.balancedtokenseq()
            current += self.create_node(UnlexerRule(src=']'))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='{'))
            current += self.balancedtokenseq()
            current += self.create_node(UnlexerRule(src='}'))
        elif choice == 3:
            if self.unlexer.max_depth >= 0:
                for _ in self.one_or_more():
                    current += UnlexerRule(src=self.char_from_list(CPP14Unlexer.charset_17))

        return current
    balancedtoken.min_depth = 0

    @depthcontrol
    def initdeclaratorlist(self):
        current = self.create_node(UnparserRule(name='initdeclaratorlist'))
        choice = self.choice([0 if [8, 9][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1002', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1002', choice)] = self.unlexer.weights.get(('alt_1002', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.initdeclarator()
        elif choice == 1:
            current += self.initdeclaratorlist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.initdeclarator()
        return current
    initdeclaratorlist.min_depth = 8

    @depthcontrol
    def initdeclarator(self):
        current = self.create_node(UnparserRule(name='initdeclarator'))
        current += self.declarator()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.initializer()

        return current
    initdeclarator.min_depth = 7

    @depthcontrol
    def declarator(self):
        current = self.create_node(UnparserRule(name='declarator'))
        choice = self.choice([0 if [7, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1007', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1007', choice)] = self.unlexer.weights.get(('alt_1007', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.ptrdeclarator()
        elif choice == 1:
            current += self.noptrdeclarator()
            current += self.parametersandqualifiers()
            current += self.trailingreturntype()
        return current
    declarator.min_depth = 6

    @depthcontrol
    def ptrdeclarator(self):
        current = self.create_node(UnparserRule(name='ptrdeclarator'))
        choice = self.choice([0 if [6, 7][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1010', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1010', choice)] = self.unlexer.weights.get(('alt_1010', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.noptrdeclarator()
        elif choice == 1:
            current += self.ptroperator()
            current += self.ptrdeclarator()
        return current
    ptrdeclarator.min_depth = 6

    @depthcontrol
    def noptrdeclarator(self):
        current = self.create_node(UnparserRule(name='noptrdeclarator'))
        choice = self.choice([0 if [5, 6, 6, 7][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1013', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_1013', choice)] = self.unlexer.weights.get(('alt_1013', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.declaratorid()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

        elif choice == 1:
            current += self.noptrdeclarator()
            current += self.parametersandqualifiers()
        elif choice == 2:
            current += self.noptrdeclarator()
            current += self.create_node(UnlexerRule(src='['))
            if self.unlexer.max_depth >= 18:
                for _ in self.zero_or_one():
                    current += self.constantexpression()

            current += self.create_node(UnlexerRule(src=']'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

        elif choice == 3:
            current += self.create_node(UnlexerRule(src='('))
            current += self.ptrdeclarator()
            current += self.create_node(UnlexerRule(src=')'))
        return current
    noptrdeclarator.min_depth = 5

    @depthcontrol
    def parametersandqualifiers(self):
        current = self.create_node(UnparserRule(name='parametersandqualifiers'))
        current += self.create_node(UnlexerRule(src='('))
        current += self.parameterdeclarationclause()
        current += self.create_node(UnlexerRule(src=')'))
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.cvqualifierseq()

        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.refqualifier()

        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.exceptionspecification()

        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.attributespecifierseq()

        return current
    parametersandqualifiers.min_depth = 1

    @depthcontrol
    def trailingreturntype(self):
        current = self.create_node(UnparserRule(name='trailingreturntype'))
        current += self.create_node(UnlexerRule(src='->'))
        current += self.trailingtypespecifierseq()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.abstractdeclarator()

        return current
    trailingreturntype.min_depth = 4

    @depthcontrol
    def ptroperator(self):
        current = self.create_node(UnparserRule(name='ptroperator'))
        choice = self.choice([0 if [0, 0, 0, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1033', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_1033', choice)] = self.unlexer.weights.get(('alt_1033', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='*'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.cvqualifierseq()

        elif choice == 1:
            current += self.create_node(UnlexerRule(src='&'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

        elif choice == 2:
            current += self.create_node(UnlexerRule(src='&&'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

        elif choice == 3:
            current += self.nestednamespecifier()
            current += self.create_node(UnlexerRule(src='*'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.cvqualifierseq()

        return current
    ptroperator.min_depth = 0

    @depthcontrol
    def cvqualifierseq(self):
        current = self.create_node(UnparserRule(name='cvqualifierseq'))
        current += self.cvqualifier()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.cvqualifierseq()

        return current
    cvqualifierseq.min_depth = 2

    @depthcontrol
    def cvqualifier(self):
        current = self.create_node(UnparserRule(name='cvqualifier'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1049', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1049', choice)] = self.unlexer.weights.get(('alt_1049', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Const()
        elif choice == 1:
            current += self.unlexer.Volatile()
        return current
    cvqualifier.min_depth = 1

    @depthcontrol
    def refqualifier(self):
        current = self.create_node(UnparserRule(name='refqualifier'))
        choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1052', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1052', choice)] = self.unlexer.weights.get(('alt_1052', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='&'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='&&'))
        return current
    refqualifier.min_depth = 0

    @depthcontrol
    def declaratorid(self):
        current = self.create_node(UnparserRule(name='declaratorid'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_one():
                current += self.create_node(UnlexerRule(src='...'))

        current += self.idexpression()
        return current
    declaratorid.min_depth = 4

    @depthcontrol
    def thetypeid(self):
        current = self.create_node(UnparserRule(name='thetypeid'))
        current += self.typespecifierseq()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.abstractdeclarator()

        return current
    thetypeid.min_depth = 5

    @depthcontrol
    def abstractdeclarator(self):
        current = self.create_node(UnparserRule(name='abstractdeclarator'))
        choice = self.choice([0 if [2, 5, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1060', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_1060', choice)] = self.unlexer.weights.get(('alt_1060', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.ptrabstractdeclarator()
        elif choice == 1:
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.noptrabstractdeclarator()

            current += self.parametersandqualifiers()
            current += self.trailingreturntype()
        elif choice == 2:
            current += self.abstractpackdeclarator()
        return current
    abstractdeclarator.min_depth = 2

    @depthcontrol
    def ptrabstractdeclarator(self):
        current = self.create_node(UnparserRule(name='ptrabstractdeclarator'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1065', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1065', choice)] = self.unlexer.weights.get(('alt_1065', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.noptrabstractdeclarator()
        elif choice == 1:
            current += self.ptroperator()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.ptrabstractdeclarator()

        return current
    ptrabstractdeclarator.min_depth = 1

    @depthcontrol
    def noptrabstractdeclarator(self):
        current = self.create_node(UnparserRule(name='noptrabstractdeclarator'))
        choice = self.choice([0 if [2, 2, 1, 0, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1069', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_1069', choice)] = self.unlexer.weights.get(('alt_1069', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.noptrabstractdeclarator()
            current += self.parametersandqualifiers()
        elif choice == 1:
            current += self.parametersandqualifiers()
        elif choice == 2:
            current += self.noptrabstractdeclarator()
            current += self.create_node(UnlexerRule(src='['))
            if self.unlexer.max_depth >= 18:
                for _ in self.zero_or_one():
                    current += self.constantexpression()

            current += self.create_node(UnlexerRule(src=']'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

        elif choice == 3:
            current += self.create_node(UnlexerRule(src='['))
            if self.unlexer.max_depth >= 18:
                for _ in self.zero_or_one():
                    current += self.constantexpression()

            current += self.create_node(UnlexerRule(src=']'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

        elif choice == 4:
            current += self.create_node(UnlexerRule(src='('))
            current += self.ptrabstractdeclarator()
            current += self.create_node(UnlexerRule(src=')'))
        return current
    noptrabstractdeclarator.min_depth = 0

    @depthcontrol
    def abstractpackdeclarator(self):
        current = self.create_node(UnparserRule(name='abstractpackdeclarator'))
        choice = self.choice([0 if [1, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1085', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1085', choice)] = self.unlexer.weights.get(('alt_1085', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.noptrabstractpackdeclarator()
        elif choice == 1:
            current += self.ptroperator()
            current += self.abstractpackdeclarator()
        return current
    abstractpackdeclarator.min_depth = 1

    @depthcontrol
    def noptrabstractpackdeclarator(self):
        current = self.create_node(UnparserRule(name='noptrabstractpackdeclarator'))
        choice = self.choice([0 if [2, 1, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1088', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_1088', choice)] = self.unlexer.weights.get(('alt_1088', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.noptrabstractpackdeclarator()
            current += self.parametersandqualifiers()
        elif choice == 1:
            current += self.noptrabstractpackdeclarator()
            current += self.create_node(UnlexerRule(src='['))
            if self.unlexer.max_depth >= 18:
                for _ in self.zero_or_one():
                    current += self.constantexpression()

            current += self.create_node(UnlexerRule(src=']'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

        elif choice == 2:
            current += self.create_node(UnlexerRule(src='...'))
        return current
    noptrabstractpackdeclarator.min_depth = 0

    @depthcontrol
    def parameterdeclarationclause(self):
        current = self.create_node(UnparserRule(name='parameterdeclarationclause'))
        choice = self.choice([0 if [0, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1097', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1097', choice)] = self.unlexer.weights.get(('alt_1097', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 5:
                for _ in self.zero_or_one():
                    current += self.parameterdeclarationlist()

            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

        elif choice == 1:
            current += self.parameterdeclarationlist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.create_node(UnlexerRule(src='...'))
        return current
    parameterdeclarationclause.min_depth = 0

    @depthcontrol
    def parameterdeclarationlist(self):
        current = self.create_node(UnparserRule(name='parameterdeclarationlist'))
        choice = self.choice([0 if [4, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1105', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1105', choice)] = self.unlexer.weights.get(('alt_1105', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.parameterdeclaration()
        elif choice == 1:
            current += self.parameterdeclarationlist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.parameterdeclaration()
        return current
    parameterdeclarationlist.min_depth = 4

    @depthcontrol
    def parameterdeclaration(self):
        current = self.create_node(UnparserRule(name='parameterdeclaration'))
        choice = self.choice([0 if [7, 7, 3, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1109', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_1109', choice)] = self.unlexer.weights.get(('alt_1109', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.declspecifierseq()
            current += self.declarator()
        elif choice == 1:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.declspecifierseq()
            current += self.declarator()
            current += self.create_node(UnlexerRule(src='='))
            current += self.initializerclause()
        elif choice == 2:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.declspecifierseq()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.abstractdeclarator()

        elif choice == 3:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.declspecifierseq()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.abstractdeclarator()

            current += self.create_node(UnlexerRule(src='='))
            current += self.initializerclause()
        return current
    parameterdeclaration.min_depth = 3

    @depthcontrol
    def functiondefinition(self):
        current = self.create_node(UnparserRule(name='functiondefinition'))
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.attributespecifierseq()

        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.declspecifierseq()

        current += self.declarator()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.virtspecifierseq()

        current += self.functionbody()
        return current
    functiondefinition.min_depth = 7

    @depthcontrol
    def functionbody(self):
        current = self.create_node(UnparserRule(name='functionbody'))
        choice = self.choice([0 if [1, 4, 1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1125', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_1125', choice)] = self.unlexer.weights.get(('alt_1125', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 7:
                for _ in self.zero_or_one():
                    current += self.ctorinitializer()

            current += self.compoundstatement()
        elif choice == 1:
            current += self.functiontryblock()
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='='))
            current += self.unlexer.Default()
            current += self.create_node(UnlexerRule(src=';'))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src='='))
            current += self.unlexer.Delete()
            current += self.create_node(UnlexerRule(src=';'))
        return current
    functionbody.min_depth = 1

    @depthcontrol
    def initializer(self):
        current = self.create_node(UnparserRule(name='initializer'))
        choice = self.choice([0 if [2, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1135', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1135', choice)] = self.unlexer.weights.get(('alt_1135', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.braceorequalinitializer()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='('))
            current += self.expressionlist()
            current += self.create_node(UnlexerRule(src=')'))
        return current
    initializer.min_depth = 2

    @depthcontrol
    def braceorequalinitializer(self):
        current = self.create_node(UnparserRule(name='braceorequalinitializer'))
        choice = self.choice([0 if [2, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1140', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1140', choice)] = self.unlexer.weights.get(('alt_1140', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='='))
            current += self.initializerclause()
        elif choice == 1:
            current += self.bracedinitlist()
        return current
    braceorequalinitializer.min_depth = 1

    @depthcontrol
    def initializerclause(self):
        current = self.create_node(UnparserRule(name='initializerclause'))
        choice = self.choice([0 if [3, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1144', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1144', choice)] = self.unlexer.weights.get(('alt_1144', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.assignmentexpression()
        elif choice == 1:
            current += self.bracedinitlist()
        return current
    initializerclause.min_depth = 1

    @depthcontrol
    def initializerlist(self):
        current = self.create_node(UnparserRule(name='initializerlist'))
        choice = self.choice([0 if [2, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1147', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1147', choice)] = self.unlexer.weights.get(('alt_1147', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.initializerclause()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

        elif choice == 1:
            current += self.initializerlist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.initializerclause()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

        return current
    initializerlist.min_depth = 2

    @depthcontrol
    def bracedinitlist(self):
        current = self.create_node(UnparserRule(name='bracedinitlist'))
        choice = self.choice([0 if [3, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1155', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1155', choice)] = self.unlexer.weights.get(('alt_1155', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='{'))
            current += self.initializerlist()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src=','))

            current += self.create_node(UnlexerRule(src='}'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='{'))
            current += self.create_node(UnlexerRule(src='}'))
        return current
    bracedinitlist.min_depth = 0

    @depthcontrol
    def classname(self):
        current = self.create_node(UnparserRule(name='classname'))
        choice = self.choice([0 if [3, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1164', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1164', choice)] = self.unlexer.weights.get(('alt_1164', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Identifier()
        elif choice == 1:
            current += self.simpletemplateid()
        return current
    classname.min_depth = 3

    @depthcontrol
    def classspecifier(self):
        current = self.create_node(UnparserRule(name='classspecifier'))
        current += self.classhead()
        current += self.create_node(UnlexerRule(src='{'))
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.memberspecification()

        current += self.create_node(UnlexerRule(src='}'))
        return current
    classspecifier.min_depth = 3

    @depthcontrol
    def classhead(self):
        current = self.create_node(UnparserRule(name='classhead'))
        choice = self.choice([0 if [5, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1170', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1170', choice)] = self.unlexer.weights.get(('alt_1170', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.classkey()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.classheadname()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.classvirtspecifier()

            if self.unlexer.max_depth >= 7:
                for _ in self.zero_or_one():
                    current += self.baseclause()

        elif choice == 1:
            current += self.classkey()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            if self.unlexer.max_depth >= 7:
                for _ in self.zero_or_one():
                    current += self.baseclause()

        return current
    classhead.min_depth = 2

    @depthcontrol
    def classheadname(self):
        current = self.create_node(UnparserRule(name='classheadname'))
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.nestednamespecifier()

        current += self.classname()
        return current
    classheadname.min_depth = 4

    @depthcontrol
    def classvirtspecifier(self):
        current = self.create_node(UnparserRule(name='classvirtspecifier'))
        current += self.unlexer.Final()
        return current
    classvirtspecifier.min_depth = 1

    @depthcontrol
    def classkey(self):
        current = self.create_node(UnparserRule(name='classkey'))
        choice = self.choice([0 if [1, 1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1179', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_1179', choice)] = self.unlexer.weights.get(('alt_1179', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Class()
        elif choice == 1:
            current += self.unlexer.Struct()
        elif choice == 2:
            current += self.unlexer.Union()
        return current
    classkey.min_depth = 1

    @depthcontrol
    def memberspecification(self):
        current = self.create_node(UnparserRule(name='memberspecification'))
        choice = self.choice([0 if [1, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1183', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1183', choice)] = self.unlexer.weights.get(('alt_1183', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.memberdeclaration()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.memberspecification()

        elif choice == 1:
            current += self.accessspecifier()
            current += self.create_node(UnlexerRule(src=':'))
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.memberspecification()

        return current
    memberspecification.min_depth = 1

    @depthcontrol
    def memberdeclaration(self):
        current = self.create_node(UnparserRule(name='memberdeclaration'))
        choice = self.choice([0 if [0, 8, 4, 19, 5, 7, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1189', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_1189', choice)] = self.unlexer.weights.get(('alt_1189', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.declspecifierseq()

            if self.unlexer.max_depth >= 9:
                for _ in self.zero_or_one():
                    current += self.memberdeclaratorlist()

            current += self.create_node(UnlexerRule(src=';'))
        elif choice == 1:
            current += self.functiondefinition()
        elif choice == 2:
            current += self.usingdeclaration()
        elif choice == 3:
            current += self.static_assertdeclaration()
        elif choice == 4:
            current += self.templatedeclaration()
        elif choice == 5:
            current += self.aliasdeclaration()
        elif choice == 6:
            current += self.emptydeclaration()
        return current
    memberdeclaration.min_depth = 0

    @depthcontrol
    def memberdeclaratorlist(self):
        current = self.create_node(UnparserRule(name='memberdeclaratorlist'))
        choice = self.choice([0 if [8, 9][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1201', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1201', choice)] = self.unlexer.weights.get(('alt_1201', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.memberdeclarator()
        elif choice == 1:
            current += self.memberdeclaratorlist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.memberdeclarator()
        return current
    memberdeclaratorlist.min_depth = 8

    @depthcontrol
    def memberdeclarator(self):
        current = self.create_node(UnparserRule(name='memberdeclarator'))
        choice = self.choice([0 if [7, 7, 18][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1205', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_1205', choice)] = self.unlexer.weights.get(('alt_1205', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.declarator()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.virtspecifierseq()

            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.purespecifier()

        elif choice == 1:
            current += self.declarator()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.braceorequalinitializer()

        elif choice == 2:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.unlexer.Identifier()

            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.create_node(UnlexerRule(src=':'))
            current += self.constantexpression()
        return current
    memberdeclarator.min_depth = 7

    @depthcontrol
    def virtspecifierseq(self):
        current = self.create_node(UnparserRule(name='virtspecifierseq'))
        choice = self.choice([0 if [2, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1215', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1215', choice)] = self.unlexer.weights.get(('alt_1215', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.virtspecifier()
        elif choice == 1:
            current += self.virtspecifierseq()
            current += self.virtspecifier()
        return current
    virtspecifierseq.min_depth = 2

    @depthcontrol
    def virtspecifier(self):
        current = self.create_node(UnparserRule(name='virtspecifier'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1218', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1218', choice)] = self.unlexer.weights.get(('alt_1218', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Override()
        elif choice == 1:
            current += self.unlexer.Final()
        return current
    virtspecifier.min_depth = 1

    @depthcontrol
    def purespecifier(self):
        local_ctx = dict()
        current = self.create_node(UnparserRule(name='purespecifier'))
        current += self.unlexer.Assign()
        current += self.unlexer.Octalliteral()
        local_ctx['val'] = current.last_child
        return current
    purespecifier.min_depth = 1

    @depthcontrol
    def baseclause(self):
        current = self.create_node(UnparserRule(name='baseclause'))
        current += self.create_node(UnlexerRule(src=':'))
        current += self.basespecifierlist()
        return current
    baseclause.min_depth = 6

    @depthcontrol
    def basespecifierlist(self):
        current = self.create_node(UnparserRule(name='basespecifierlist'))
        choice = self.choice([0 if [5, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1222', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1222', choice)] = self.unlexer.weights.get(('alt_1222', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.basespecifier()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

        elif choice == 1:
            current += self.basespecifierlist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.basespecifier()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

        return current
    basespecifierlist.min_depth = 5

    @depthcontrol
    def basespecifier(self):
        current = self.create_node(UnparserRule(name='basespecifier'))
        choice = self.choice([0 if [4, 4, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1230', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_1230', choice)] = self.unlexer.weights.get(('alt_1230', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.basetypespecifier()
        elif choice == 1:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.unlexer.Virtual()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.accessspecifier()

            current += self.basetypespecifier()
        elif choice == 2:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.accessspecifier()
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.unlexer.Virtual()

            current += self.basetypespecifier()
        return current
    basespecifier.min_depth = 4

    @depthcontrol
    def classordecltype(self):
        current = self.create_node(UnparserRule(name='classordecltype'))
        choice = self.choice([0 if [4, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1239', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1239', choice)] = self.unlexer.weights.get(('alt_1239', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.nestednamespecifier()

            current += self.classname()
        elif choice == 1:
            current += self.decltypespecifier()
        return current
    classordecltype.min_depth = 2

    @depthcontrol
    def basetypespecifier(self):
        current = self.create_node(UnparserRule(name='basetypespecifier'))
        current += self.classordecltype()
        return current
    basetypespecifier.min_depth = 3

    @depthcontrol
    def accessspecifier(self):
        current = self.create_node(UnparserRule(name='accessspecifier'))
        choice = self.choice([0 if [1, 1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1243', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_1243', choice)] = self.unlexer.weights.get(('alt_1243', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Private()
        elif choice == 1:
            current += self.unlexer.Protected()
        elif choice == 2:
            current += self.unlexer.Public()
        return current
    accessspecifier.min_depth = 1

    @depthcontrol
    def conversionfunctionid(self):
        current = self.create_node(UnparserRule(name='conversionfunctionid'))
        current += self.unlexer.Operator()
        current += self.conversiontypeid()
        return current
    conversionfunctionid.min_depth = 6

    @depthcontrol
    def conversiontypeid(self):
        current = self.create_node(UnparserRule(name='conversiontypeid'))
        current += self.typespecifierseq()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.conversiondeclarator()

        return current
    conversiontypeid.min_depth = 5

    @depthcontrol
    def conversiondeclarator(self):
        current = self.create_node(UnparserRule(name='conversiondeclarator'))
        current += self.ptroperator()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.conversiondeclarator()

        return current
    conversiondeclarator.min_depth = 1

    @depthcontrol
    def ctorinitializer(self):
        current = self.create_node(UnparserRule(name='ctorinitializer'))
        current += self.create_node(UnlexerRule(src=':'))
        current += self.meminitializerlist()
        return current
    ctorinitializer.min_depth = 6

    @depthcontrol
    def meminitializerlist(self):
        current = self.create_node(UnparserRule(name='meminitializerlist'))
        choice = self.choice([0 if [5, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1250', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1250', choice)] = self.unlexer.weights.get(('alt_1250', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.meminitializer()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

        elif choice == 1:
            current += self.meminitializer()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

            current += self.create_node(UnlexerRule(src=','))
            current += self.meminitializerlist()
        return current
    meminitializerlist.min_depth = 5

    @depthcontrol
    def meminitializer(self):
        current = self.create_node(UnparserRule(name='meminitializer'))
        choice = self.choice([0 if [4, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1258', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1258', choice)] = self.unlexer.weights.get(('alt_1258', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.meminitializerid()
            current += self.create_node(UnlexerRule(src='('))
            if self.unlexer.max_depth >= 4:
                for _ in self.zero_or_one():
                    current += self.expressionlist()

            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 1:
            current += self.meminitializerid()
            current += self.bracedinitlist()
        return current
    meminitializer.min_depth = 4

    @depthcontrol
    def meminitializerid(self):
        current = self.create_node(UnparserRule(name='meminitializerid'))
        choice = self.choice([0 if [3, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1264', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1264', choice)] = self.unlexer.weights.get(('alt_1264', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.classordecltype()
        elif choice == 1:
            current += self.unlexer.Identifier()
        return current
    meminitializerid.min_depth = 3

    @depthcontrol
    def operatorfunctionid(self):
        current = self.create_node(UnparserRule(name='operatorfunctionid'))
        current += self.unlexer.Operator()
        current += self.theoperator()
        return current
    operatorfunctionid.min_depth = 1

    @depthcontrol
    def literaloperatorid(self):
        current = self.create_node(UnparserRule(name='literaloperatorid'))
        choice = self.choice([0 if [3, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1267', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1267', choice)] = self.unlexer.weights.get(('alt_1267', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Operator()
            current += self.unlexer.Stringliteral()
            current += self.unlexer.Identifier()
        elif choice == 1:
            current += self.unlexer.Operator()
            current += self.unlexer.Userdefinedstringliteral()
        return current
    literaloperatorid.min_depth = 3

    @depthcontrol
    def templatedeclaration(self):
        current = self.create_node(UnparserRule(name='templatedeclaration'))
        current += self.unlexer.Template()
        current += self.create_node(UnlexerRule(src='<'))
        current += self.templateparameterlist()
        current += self.create_node(UnlexerRule(src='>'))
        current += self.declaration()
        return current
    templatedeclaration.min_depth = 4

    @depthcontrol
    def templateparameterlist(self):
        current = self.create_node(UnparserRule(name='templateparameterlist'))
        choice = self.choice([0 if [3, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1272', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1272', choice)] = self.unlexer.weights.get(('alt_1272', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.templateparameter()
        elif choice == 1:
            current += self.templateparameterlist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.templateparameter()
        return current
    templateparameterlist.min_depth = 3

    @depthcontrol
    def templateparameter(self):
        current = self.create_node(UnparserRule(name='templateparameter'))
        choice = self.choice([0 if [2, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1276', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1276', choice)] = self.unlexer.weights.get(('alt_1276', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.typeparameter()
        elif choice == 1:
            current += self.parameterdeclaration()
        return current
    templateparameter.min_depth = 2

    @depthcontrol
    def typeparameter(self):
        current = self.create_node(UnparserRule(name='typeparameter'))
        choice = self.choice([0 if [1, 6, 1, 6, 4, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1279', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_1279', choice)] = self.unlexer.weights.get(('alt_1279', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Class()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.unlexer.Identifier()

        elif choice == 1:
            current += self.unlexer.Class()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.unlexer.Identifier()

            current += self.create_node(UnlexerRule(src='='))
            current += self.thetypeid()
        elif choice == 2:
            current += self.unlexer.Typename_()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.unlexer.Identifier()

        elif choice == 3:
            current += self.unlexer.Typename_()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.unlexer.Identifier()

            current += self.create_node(UnlexerRule(src='='))
            current += self.thetypeid()
        elif choice == 4:
            current += self.unlexer.Template()
            current += self.create_node(UnlexerRule(src='<'))
            current += self.templateparameterlist()
            current += self.create_node(UnlexerRule(src='>'))
            current += self.unlexer.Class()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.unlexer.Identifier()

        elif choice == 5:
            current += self.unlexer.Template()
            current += self.create_node(UnlexerRule(src='<'))
            current += self.templateparameterlist()
            current += self.create_node(UnlexerRule(src='>'))
            current += self.unlexer.Class()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.unlexer.Identifier()

            current += self.create_node(UnlexerRule(src='='))
            current += self.idexpression()
        return current
    typeparameter.min_depth = 1

    @depthcontrol
    def simpletemplateid(self):
        current = self.create_node(UnparserRule(name='simpletemplateid'))
        current += self.templatename()
        current += self.create_node(UnlexerRule(src='<'))
        if self.unlexer.max_depth >= 6:
            for _ in self.zero_or_one():
                current += self.templateargumentlist()

        current += self.create_node(UnlexerRule(src='>'))
        return current
    simpletemplateid.min_depth = 4

    @depthcontrol
    def templateid(self):
        current = self.create_node(UnparserRule(name='templateid'))
        choice = self.choice([0 if [5, 2, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1308', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_1308', choice)] = self.unlexer.weights.get(('alt_1308', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.simpletemplateid()
        elif choice == 1:
            current += self.operatorfunctionid()
            current += self.create_node(UnlexerRule(src='<'))
            if self.unlexer.max_depth >= 6:
                for _ in self.zero_or_one():
                    current += self.templateargumentlist()

            current += self.create_node(UnlexerRule(src='>'))
        elif choice == 2:
            current += self.literaloperatorid()
            current += self.create_node(UnlexerRule(src='<'))
            if self.unlexer.max_depth >= 6:
                for _ in self.zero_or_one():
                    current += self.templateargumentlist()

            current += self.create_node(UnlexerRule(src='>'))
        return current
    templateid.min_depth = 2

    @depthcontrol
    def templatename(self):
        current = self.create_node(UnparserRule(name='templatename'))
        current += self.unlexer.Identifier()
        return current
    templatename.min_depth = 3

    @depthcontrol
    def templateargumentlist(self):
        current = self.create_node(UnparserRule(name='templateargumentlist'))
        choice = self.choice([0 if [5, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1318', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1318', choice)] = self.unlexer.weights.get(('alt_1318', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.templateargument()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

        elif choice == 1:
            current += self.templateargumentlist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.templateargument()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

        return current
    templateargumentlist.min_depth = 5

    @depthcontrol
    def templateargument(self):
        current = self.create_node(UnparserRule(name='templateargument'))
        choice = self.choice([0 if [6, 18, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1326', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_1326', choice)] = self.unlexer.weights.get(('alt_1326', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.thetypeid()
        elif choice == 1:
            current += self.constantexpression()
        elif choice == 2:
            current += self.idexpression()
        return current
    templateargument.min_depth = 4

    @depthcontrol
    def typenamespecifier(self):
        current = self.create_node(UnparserRule(name='typenamespecifier'))
        choice = self.choice([0 if [3, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1330', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1330', choice)] = self.unlexer.weights.get(('alt_1330', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Typename_()
            current += self.nestednamespecifier()
            current += self.unlexer.Identifier()
        elif choice == 1:
            current += self.unlexer.Typename_()
            current += self.nestednamespecifier()
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.unlexer.Template()

            current += self.simpletemplateid()
        return current
    typenamespecifier.min_depth = 3

    @depthcontrol
    def explicitinstantiation(self):
        current = self.create_node(UnparserRule(name='explicitinstantiation'))
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.unlexer.Extern()

        current += self.unlexer.Template()
        current += self.declaration()
        return current
    explicitinstantiation.min_depth = 2

    @depthcontrol
    def explicitspecialization(self):
        current = self.create_node(UnparserRule(name='explicitspecialization'))
        current += self.unlexer.Template()
        current += self.create_node(UnlexerRule(src='<'))
        current += self.create_node(UnlexerRule(src='>'))
        current += self.declaration()
        return current
    explicitspecialization.min_depth = 2

    @depthcontrol
    def tryblock(self):
        current = self.create_node(UnparserRule(name='tryblock'))
        current += self.unlexer.Try()
        current += self.compoundstatement()
        current += self.handlerseq()
        return current
    tryblock.min_depth = 3

    @depthcontrol
    def functiontryblock(self):
        current = self.create_node(UnparserRule(name='functiontryblock'))
        current += self.unlexer.Try()
        if self.unlexer.max_depth >= 7:
            for _ in self.zero_or_one():
                current += self.ctorinitializer()

        current += self.compoundstatement()
        current += self.handlerseq()
        return current
    functiontryblock.min_depth = 3

    @depthcontrol
    def handlerseq(self):
        current = self.create_node(UnparserRule(name='handlerseq'))
        current += self.handler()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.handlerseq()

        return current
    handlerseq.min_depth = 2

    @depthcontrol
    def handler(self):
        current = self.create_node(UnparserRule(name='handler'))
        current += self.unlexer.Catch()
        current += self.create_node(UnlexerRule(src='('))
        current += self.exceptiondeclaration()
        current += self.create_node(UnlexerRule(src=')'))
        current += self.compoundstatement()
        return current
    handler.min_depth = 1

    @depthcontrol
    def exceptiondeclaration(self):
        current = self.create_node(UnparserRule(name='exceptiondeclaration'))
        choice = self.choice([0 if [7, 5, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1341', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_1341', choice)] = self.unlexer.weights.get(('alt_1341', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.typespecifierseq()
            current += self.declarator()
        elif choice == 1:
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.attributespecifierseq()

            current += self.typespecifierseq()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.abstractdeclarator()

        elif choice == 2:
            current += self.create_node(UnlexerRule(src='...'))
        return current
    exceptiondeclaration.min_depth = 0

    @depthcontrol
    def throwexpression(self):
        current = self.create_node(UnparserRule(name='throwexpression'))
        current += self.unlexer.Throw()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.assignmentexpression()

        return current
    throwexpression.min_depth = 1

    @depthcontrol
    def exceptionspecification(self):
        current = self.create_node(UnparserRule(name='exceptionspecification'))
        choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1350', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1350', choice)] = self.unlexer.weights.get(('alt_1350', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.dynamicexceptionspecification()
        elif choice == 1:
            current += self.noexceptspecification()
        return current
    exceptionspecification.min_depth = 2

    @depthcontrol
    def dynamicexceptionspecification(self):
        current = self.create_node(UnparserRule(name='dynamicexceptionspecification'))
        current += self.unlexer.Throw()
        current += self.create_node(UnlexerRule(src='('))
        if self.unlexer.max_depth >= 7:
            for _ in self.zero_or_one():
                current += self.typeidlist()

        current += self.create_node(UnlexerRule(src=')'))
        return current
    dynamicexceptionspecification.min_depth = 1

    @depthcontrol
    def typeidlist(self):
        current = self.create_node(UnparserRule(name='typeidlist'))
        choice = self.choice([0 if [6, 7][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1356', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1356', choice)] = self.unlexer.weights.get(('alt_1356', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.thetypeid()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

        elif choice == 1:
            current += self.typeidlist()
            current += self.create_node(UnlexerRule(src=','))
            current += self.thetypeid()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='...'))

        return current
    typeidlist.min_depth = 6

    @depthcontrol
    def noexceptspecification(self):
        current = self.create_node(UnparserRule(name='noexceptspecification'))
        choice = self.choice([0 if [18, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1364', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1364', choice)] = self.unlexer.weights.get(('alt_1364', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Noexcept()
            current += self.create_node(UnlexerRule(src='('))
            current += self.constantexpression()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 1:
            current += self.unlexer.Noexcept()
        return current
    noexceptspecification.min_depth = 1

    @depthcontrol
    def theoperator(self):
        current = self.create_node(UnparserRule(name='theoperator'))
        choice = self.choice([0 if [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1369', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_1369', choice)] = self.unlexer.weights.get(('alt_1369', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.New()
        elif choice == 1:
            current += self.unlexer.Delete()
        elif choice == 2:
            current += self.unlexer.New()
            current += self.create_node(UnlexerRule(src='['))
            current += self.create_node(UnlexerRule(src=']'))
        elif choice == 3:
            current += self.unlexer.Delete()
            current += self.create_node(UnlexerRule(src='['))
            current += self.create_node(UnlexerRule(src=']'))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src='+'))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src='-'))
        elif choice == 6:
            current += self.create_node(UnlexerRule(src='*'))
        elif choice == 7:
            current += self.create_node(UnlexerRule(src='/'))
        elif choice == 8:
            current += self.create_node(UnlexerRule(src='%'))
        elif choice == 9:
            current += self.create_node(UnlexerRule(src='^'))
        elif choice == 10:
            current += self.create_node(UnlexerRule(src='&'))
        elif choice == 11:
            current += self.create_node(UnlexerRule(src='|'))
        elif choice == 12:
            current += self.create_node(UnlexerRule(src='~'))
        elif choice == 13:
            current += self.create_node(UnlexerRule(src='!'))
        elif choice == 14:
            current += self.create_node(UnlexerRule(src='not'))
        elif choice == 15:
            current += self.create_node(UnlexerRule(src='='))
        elif choice == 16:
            current += self.create_node(UnlexerRule(src='<'))
        elif choice == 17:
            current += self.create_node(UnlexerRule(src='>'))
        elif choice == 18:
            current += self.create_node(UnlexerRule(src='+='))
        elif choice == 19:
            current += self.create_node(UnlexerRule(src='-='))
        elif choice == 20:
            current += self.create_node(UnlexerRule(src='*='))
        elif choice == 21:
            current += self.create_node(UnlexerRule(src='/='))
        elif choice == 22:
            current += self.create_node(UnlexerRule(src='%='))
        elif choice == 23:
            current += self.create_node(UnlexerRule(src='^='))
        elif choice == 24:
            current += self.create_node(UnlexerRule(src='&='))
        elif choice == 25:
            current += self.create_node(UnlexerRule(src='|='))
        elif choice == 26:
            current += self.unlexer.LeftShift()
        elif choice == 27:
            current += self.unlexer.RightShift()
        elif choice == 28:
            current += self.unlexer.RightShiftAssign()
        elif choice == 29:
            current += self.unlexer.LeftShiftAssign()
        elif choice == 30:
            current += self.create_node(UnlexerRule(src='=='))
        elif choice == 31:
            current += self.create_node(UnlexerRule(src='!='))
        elif choice == 32:
            current += self.create_node(UnlexerRule(src='<='))
        elif choice == 33:
            current += self.create_node(UnlexerRule(src='>='))
        elif choice == 34:
            current += self.create_node(UnlexerRule(src='&&'))
        elif choice == 35:
            current += self.create_node(UnlexerRule(src='and'))
        elif choice == 36:
            current += self.create_node(UnlexerRule(src='||'))
        elif choice == 37:
            current += self.create_node(UnlexerRule(src='or'))
        elif choice == 38:
            current += self.create_node(UnlexerRule(src='++'))
        elif choice == 39:
            current += self.create_node(UnlexerRule(src='--'))
        elif choice == 40:
            current += self.create_node(UnlexerRule(src=','))
        elif choice == 41:
            current += self.create_node(UnlexerRule(src='->*'))
        elif choice == 42:
            current += self.create_node(UnlexerRule(src='->'))
        elif choice == 43:
            current += self.create_node(UnlexerRule(src='('))
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 44:
            current += self.create_node(UnlexerRule(src='['))
            current += self.create_node(UnlexerRule(src=']'))
        return current
    theoperator.min_depth = 0

    @depthcontrol
    def literal(self):
        current = self.create_node(UnparserRule(name='literal'))
        choice = self.choice([0 if [2, 2, 4, 1, 2, 2, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1458', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_1458', choice)] = self.unlexer.weights.get(('alt_1458', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Integerliteral()
        elif choice == 1:
            current += self.unlexer.Characterliteral()
        elif choice == 2:
            current += self.unlexer.Floatingliteral()
        elif choice == 3:
            current += self.unlexer.Stringliteral()
        elif choice == 4:
            current += self.booleanliteral()
        elif choice == 5:
            current += self.pointerliteral()
        elif choice == 6:
            current += self.userdefinedliteral()
        return current
    literal.min_depth = 1

    @depthcontrol
    def booleanliteral(self):
        current = self.create_node(UnparserRule(name='booleanliteral'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1466', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_1466', choice)] = self.unlexer.weights.get(('alt_1466', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.False_()
        elif choice == 1:
            current += self.unlexer.True_()
        return current
    booleanliteral.min_depth = 1

    @depthcontrol
    def pointerliteral(self):
        current = self.create_node(UnparserRule(name='pointerliteral'))
        current += self.unlexer.Nullptr()
        return current
    pointerliteral.min_depth = 1

    @depthcontrol
    def userdefinedliteral(self):
        current = self.create_node(UnparserRule(name='userdefinedliteral'))
        choice = self.choice([0 if [5, 5, 5, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_1469', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_1469', choice)] = self.unlexer.weights.get(('alt_1469', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Userdefinedintegerliteral()
        elif choice == 1:
            current += self.unlexer.Userdefinedfloatingliteral()
        elif choice == 2:
            current += self.unlexer.Userdefinedstringliteral()
        elif choice == 3:
            current += self.unlexer.Userdefinedcharacterliteral()
        return current
    userdefinedliteral.min_depth = 5

    default_rule = translationunit

